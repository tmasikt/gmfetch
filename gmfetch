#/bin/bash

magenta="\033[1;35m"
green="\033[1;32m"
white="\033[1;37m"
blue="\033[1;34m"
red="\033[1;31m"
black="\033[1;40;30m"
yellow="\033[1;33m"
cyan="\033[1;36m"
reset="\033[0m"
bgyellow="\033[1;43;33m"
bgwhite="\033[1;47;37m"
c0=${reset}
c1=${magenta}
c2=${green}
c3=${white}
c4=${blue}
c5=${red}
c6=${yellow}
c7=${cyan}
c8=${black}
c9=${bgyellow}
c10=${bgwhite}


get_distro_name() {
	if [ "$kernel" = "Android" ]; then
		echo 'Android'
	elif [ "$kernel" = "Darwin" ]; then
		echo "macOS $(uname) $(sw_vers -productVersion)"
	else
		awk -F '"' '/PRETTY_NAME/ { print $2 }' /etc/os-release
	fi
}

get_storage_info() {
	if [ "$kernel" = Androi3zd ]; then
		_MOUNTED_ON="/data"
		_GREP_ONE_ROW="$(df -h | grep ${_MOUNTED_ON})"
		_SIZE="$(echo "${_GREP_ONE_ROW}" | awk '{print $2}')"
		_USED="$(echo "${_GREP_ONE_ROW}" | awk '{print $3}')"
		echo "$(head -n1 <<<"${_USED}")B / $(head -n1 <<<"${_SIZE}")B"
	elif [ "$kernel" = "Darwin" ]; then
		total_size=$(df -Hl | grep -w "/" | awk '{print $2}')
		free_size=$(df -Hl | grep -w "/" | awk '{print $4}')
		used_size=$(( ${total_size::-1} - ${free_size::-1} ))
		echo "${used_size}G / $total_size"
	else
		df -h --output=used,size / | awk 'NR == 2 { print $1" / "$2 }'
	fi
}

get_uptime() {
	if [ "$kernel" = "Darwin" ]; then
		up=$(uptime | awk 'NR==1{print $3}')
		echo " ${up::-1}"
	else
    up=$(uptime -p)
    if [ "${up:5:1}" = "h" ]; then
      echo $(echo "${up:3:-1}" | cut -d "," -f 1)
    else
      echo "${up:3:20}"
    fi
	fi
}


get_mem() {
	if [ "$kernel" = "Darwin" ]; then
		total_mem=$(($(sysctl -a | awk '/hw./' | awk '/mem/' | awk 'NR==1{print $2}') / 2**20 ))
		used_mem=$(vm_stat | grep -E "Pageouts:" | awk 'NR==1{print $2}')
		echo "${used_mem::-1} / $total_mem MB"
	else
		free --mega | awk 'NR == 2 { print $3" / "$2" MB" }'
	fi
}


  get_de_wm() {
	wm="${XDG_CURRENT_DESKTOP#*:}"
	[ "$wm" ] || wm="$DESKTOP_SESSION"

	# for most WMs
	[ ! "$wm" ] && [ "$DISPLAY" ] && command -v xprop >/dev/null && {
		id=$(xprop -root -notype _NET_SUPPORTING_WM_CHECK 2>/dev/null)
		id=${id##* }
		wm=$(xprop -id "$id" -notype -len 100 -f _NET_WM_NAME 8t 2>/dev/null | grep '^_NET_WM_NAME' | cut -d\" -f 2)
	}

	# for non-EWMH WMs
	[ ! "$wm" ] || [ "$wm" = "LG3D" ] && {
		wms=('sway' 'kiwmi' 'wayfire' 'sowm' 'catwm' 'fvwm' 'dwm' '2bwm' 'monsterwm' 'tinywm' 'xmonad')
		for current_wm in "${wms[@]}"; do
			if pgrep -x "$current_wm" 2>/dev/null >&2; then
				wm="${current_wm}";
				break
			fi
		done
	}

	echo "${wm:-unknown}"
}


get_pkg_count() {
	package_managers=('xbps-install' 'apk' 'port' 'apt' 'pacman' 'nix' 'dnf' 'rpm' 'emerge' 'eopkg')
	for package_manager in "${package_managers[@]}"; do
		if command -v "$package_manager" 2>/dev/null >&2; then
			case "$package_manager" in
			xbps-install) xbps-query -l | wc -l ;;
			apk) apk search | wc -l ;;
			apt) if [ "$kernel" != "Darwin" ]; then
					echo $(($(apt list --installed 2>/dev/null | wc -l) - 1))
				 else
					echo 0
				 fi
				 ;;
			pacman) pacman -Q | wc -l ;;
			nix) nix-env -qa --installed '*' | wc -l ;;
			dnf) dnf list installed | wc -l ;;
			rpm) rpm -qa | wc -l ;;
			emerge) qlist -I | wc -l ;;
			port) port installed 2>/dev/null | wc -l | awk 'NR==1{print $1}' ;;
			eopkg) eopkg li | wc -l ;;
			esac

			# if a package manager is found return from the function
			return
		fi
	done
	echo 0
}

distro=$(get_distro_name)

if [ "$distro" = "Arch Linux" ]; then
  distro="arch"
fi

distro=$(echo $distro | python -c "distro = input();print(distro.ljust(13, ' '))")


uptime=$(echo $(get_uptime) | python -c "distro = input();print(distro.ljust(13, ' '))")

de_wm=$(echo $(get_de_wm) | python -c "distro = input();print(distro.ljust(13, ' '))")

pkgs=$(echo $(get_pkg_count) | python -c "distro = input();print(distro.ljust(13, ' '))")

disk=$(echo $(get_storage_info) | python -c "distro = input();print(distro.ljust(13, ' '))")

user=$(echo $(echo "$c4$(whoami)$c1@$c6$(hostname)") | python -c "distro = input();print(distro.ljust(62, ' '))")


echo -e "$c2▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄$c4▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄$c0"
echo -e "$c2█                                       $c4█"

echo -e "$c1█             $c1\e[3m\e[4mTaLyamFetch\e[0m$c0               $c1█"
echo -e "$c1█       who                             $c1█"
echo -e "$c5█      even       $c5    os:$c4 \e[3m$distro \e[0m$c5█"
echo -e "$c5█     cares        $c5 disk:$c4 \e[3m$disk \e[0m$c5█"
echo -e "$c7█     about          $c5 wm:$c7 \e[3m$de_wm \e[0m$c7█"
echo -e "$c7█      your        $c5 pkgs:$c7 \e[3m$pkgs \e[0m$c7█"

echo -e "$c6█        os      $c5 uptime:$c6 \e[3m$uptime \e[0m$c6█"
echo -e "█                                       █"
echo -e "\033[1;30m█      \e[3m $user$c3█"

echo -e "\033[1;30m█▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄$c3▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄█"

